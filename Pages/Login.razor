@page "/login"
@inject StateService State
@inject AuthService Auth
@inject NavigationManager Navigation
@inject HttpClient Http
@inject JwtAuthStateProvider Auth2
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject IJSRuntime JS


<div class="page auth-page">
    <div class="loading-spinner @(_isLoading ? "active" : "")"></div>
    <div class="auth-container">
        <h2>Login</h2>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="my-2 error-message">@errorMessage</MudAlert>
        }
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="loginModel.Email"
                          Label="Email"
                          Placeholder="Enter email"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          Required="true"
                          RequiredError="Email is required"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email format" })"
                          Class="form-group" />
            <MudTextField @bind-Value="loginModel.Password"
                          Label="Password"
                          Placeholder="Enter password"
                          Variant="Variant.Outlined"
                          InputType="@(showPassword? InputType.Text: InputType.Password)"
                          Required="true"
                          RequiredError="Password is required"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(showPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          AdornmentColor="Color.Primary"
                          OnAdornmentClick="TogglePassword"
                          Class="form-group" />
            <div class="action-buttons">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="btn-primary seller full-width">
                    Login
                </MudButton>
            </div>
        </EditForm>
        <p class="auth-switch">
            No account? <span @onclick="NavigateToRegister">Sign up</span>
        </p>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool showPassword = false;
    private bool _isLoading = false;

    private void TogglePassword()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("api/Login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JS.InvokeVoidAsync("console.log", result);
                if (result.Success)
                {
                   
                    await Auth2.MarkUserAsAuthenticated(result.Response);
                    var role = await Auth2.GetUserRole();
                    if (role == "BUYER")
                    {
                        Navigation.NavigateTo("buyer-dashboard");
                    }
                    else if (role == "SELLER")
                    {
                        Navigation.NavigateTo("seller-dashboard");
                    }
                    else
                    {
                        Navigation.NavigateTo("/");
                    }
                }
                else
                {
                    errorMessage = result.Response;
                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
            State.NotifyStateChanged();
        }
    }

    private void NavigateToRegister() => Navigation.NavigateTo("register");

    public class LoginResponse
    {
        public string Response { get; set; } = string.Empty;
        public bool Success { get; set; }
    }
}
