@page "/seller-profile"
@inject StateService State
@inject NavigationManager Nav
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SELLER")]
@using MudBlazor
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@implements IDisposable

<div class="page profile-page">
    <h1>Edit Profile</h1>
    <div class="loading-spinner @(_isLoading ? "active" : "")"></div>

    <div class="profile-section">
        <h2>Tags</h2>
        @if (UserTags.Any())
        {
            <MudChipSet T="string" Class="tags-container" ReadOnly="true">
                @foreach (var tag in UserTags)
                {
                    <MudChip Text="@tag"
                             Value="@tag"
                             Color="Color.Default"
                             Variant="Variant.Outlined"
                             Class="tag" />
                }
            </MudChipSet>
        }
        else
        {
            <p class="empty-state">No tags added yet.</p>
        }

        <div class="form-group">
            <label>Search or add tags</label>
            <select id="tagsSelect" multiple="multiple"></select>
            @if (!_SelectedTags.Any())
            {
                <div class="text-danger">Please pick at least one tag</div>
            }
        </div>

        <div class="form-group">
            <MudAutocomplete T="string"
                             @bind-Value="SelectedLocation"
                             Label="Search locations"
                             Variant="Variant.Outlined"
                             Dense="true"
                             Class="location-container"
                             SearchFunc="@SearchLocations"
                             Error="@string.IsNullOrWhiteSpace(SelectedLocation)"
                             ErrorText="Please pick a location" />
        </div>

        <MudButton OnClick="SaveTags"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Class="btn-primary seller">
            Submit
        </MudButton>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

@code {
    private bool _isLoading = false;
    private string errorMessage = string.Empty;
    public List<string> _SelectedTags { get; set; } = new List<string>();
    public string SelectedLocation { get; set; }
    public List<string> AllTags { get; set; } = new();
    public List<string> AllLocations { get; set; } = new();
    public List<string> UserTags { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        State.OnChange += StateHasChanged;
        _isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync("api/Buyer/get-tags");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TagResults>();
                AllTags = result.AllTags ?? new();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load tags: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }

        try
        {
            var response = await Http.GetAsync("api/Buyer/get-locations");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TagResults>();
                AllLocations = result.AllTags ?? new();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load locations: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }

        try
        {
            var response = await Http.GetAsync("api/Seller/get-user-tags");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TagResults>();
                UserTags = result.AllTags ?? new();
                _SelectedTags = result.AllTags ?? new();
                await JS.InvokeVoidAsync("initSelect2WithData",
                                        DotNetObjectReference.Create(this),
                                        AllTags,
                                        _SelectedTags);
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load user tags: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void UpdateSelectedTags(string[] selected)
    {
        _SelectedTags = selected?.ToList() ?? new List<string>();
        StateHasChanged();
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async Task SaveTags()
    {
        if (!_SelectedTags.Any() || string.IsNullOrWhiteSpace(SelectedLocation))
        {
            Snackbar.Add("Please select at least one tag and a location.", Severity.Error);
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            var model = new UpdateTags
            {
                Selectedtags = _SelectedTags.ToList()
            };
            var response = await Http.PostAsJsonAsync("api/seller/save-user-tags", _SelectedTags);
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                response = await Http.GetAsync($"api/seller/save-user-location?location={Uri.EscapeDataString(SelectedLocation)}");
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    Snackbar.Add("Profile updated successfully!", Severity.Success);
                    Nav.NavigateTo("seller-profile", forceLoad: true);
                }
                else
                {
                    errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save profile: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> SearchLocations(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return AllLocations;

        return AllLocations
            .Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
    }

    public class TagResults
    {
        public TagResults()
        {
            AllTags = new();
        }
        public List<string> AllTags { get; set; }
    }

    public class UpdateTags
    {
        public List<string> Selectedtags { get; set; }
    }
}
